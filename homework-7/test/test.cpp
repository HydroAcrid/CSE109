#include <stdexcept>
#include <vector>
#include <stdio.h>
#include <stdlib.h>
#include "pack109.hpp"
#include <cmath>
#include <limits.h>
#include <bitset>
#include <iostream>
#include <string>

template <class T>
int test(const char* label, T lhs, T rhs) {
  printf("%s: ", label);
  if (lhs==rhs) {
    printf("Passed\n");
    return 1;
  } else {
    printf("Failed\n");
    printf("  lhs=%x\n", *(unsigned int *)&lhs);
    printf("  rhs=%x\n", *(unsigned int *)&rhs);
    exit(1);
  }
}

int testvec(const char* label, vec lhs, vec rhs) {
  printf("%s: ", label);
  if (lhs==rhs) {
    printf("Passed\n");
    return 1;
  } else {
    printf("Failed\n");
    printf("  lhs="); pack109::printVec(lhs); printf("\n");
    printf("  rhs="); pack109::printVec(rhs); printf("\n");
    exit(1);
  }
}

int testString(const char* label, string lhs, string rhs) {
  printf("%s: ", label);
  if (lhs.compare(rhs) == 0) {
    printf("Passed\n");
    return 1;
  } 
  else {
    printf("Failed\n");
    printf("  lhs=%x\n", *(u8 *)(&lhs));
    printf("  rhs=%x\n", *(u8 *)(&rhs));
    exit(1);
  }
}

int test_Person(const char* label, struct Person lhs, struct Person rhs) {
  printf("%s: ", label);
  if (lhs.name.compare(rhs.name) == 0) {
    if (lhs.age == rhs.age) {
      if (fabs(lhs.height - rhs.height) < 0.000001) {
        printf("Passed\n");
        return 1;
      }
      else {
        printf("Failed\n");
        std::cout << "  Failed at Height..." << std::endl;
        std::cout << "  lhs=" << std::hex << lhs.height << '\n';
        std::cout << "  rhs=" << std::hex << rhs.height << '\n';
      }
    }
    else {
      printf("Failed\n");
      std::cout << "  Failed at Age..." << std::endl;
      std::cout << "  lhs=" << std::hex << lhs.age << '\n';
      std::cout << "  rhs=" << std::hex << rhs.age << '\n';
    }
  }
  else {
    printf("Failed\n");
    std::cout << "  Failed at Name..." << std::endl;
    std::cout << "  lhs=" << std::hex << lhs.name << '\n';
    std::cout << "  rhs=" << std::hex << rhs.name << '\n';
    std::cout << "  ->" << lhs.name << '\n';
    std::cout << "  ->" << rhs.name << '\n';
  }
  exit(1);
}


int main() {

  // Test bool

  // True
  vec v1{0xa0};
  vec bytes1 = pack109::serialize(true);
  testvec("Test 1 - true ser", bytes1, v1);

  bool bool_true = pack109::deserialize_bool(bytes1);
  test("Test 2 - true de", bool_true, true);
 

  // False
  vec v2{0xa1};
  vec bytes2 = pack109::serialize(false);
  testvec("Test 3 - false ser", bytes2, v2);

  bool bool_false = pack109::deserialize_bool(bytes2); 
  test("Test 4 - false de", bool_false, false);

  // Test Integers

  // u8
  u8 item1 = 0x42;
  vec v3{0xa2, 0x42};
  vec bytes3 = pack109::serialize(item1);
  testvec("Test 5 - u8 ser", bytes3, v3);
  
  u8 int_u8 = pack109::deserialize_u8(bytes3);  
  test("Test 6 - u8 de", int_u8, item1);

  // u32
  u32 item2 = 0x12345678;
  vec v4de{0xa3, 0x12, 0x34, 0x56, 0x78};
  vec bytes4 = pack109::serialize(item2);
  testvec("Test 7 - u32 ser", bytes4, v4de);
  
  u32 int_u32 = pack109::deserialize_u32(bytes4);  
  test("Test 8 - u32 de", int_u32, item2);

  // u64
  u64 item3 = 0x1234567890abcdef;
  vec v5{0xa4, 0x12, 0x34, 0x56, 0x78, 0x90, 0xab, 0xcd, 0xef};
  vec bytes5 = pack109::serialize(item3);
  testvec("Test 9 - u64 ser", bytes5, v5);

  u64 long_u64 = pack109::deserialize_u64(bytes5);  
  test("Test 10 - u64 de", long_u64, item3);

  // i8
  i8 item4 = 0x42;
  vec v6{0xa5, 0x42};
  vec bytes6 = pack109::serialize(item4);
  testvec("Test 11 - i8 ser", bytes6, v6);
  
  i8 int_i8 = pack109::deserialize_i8(bytes6);  
  test("Test 12 - i8 de", int_i8, item4);

  // i32
  i32 item5 = 0x12345678;
  vec v7{0xa6, 0x12, 0x34, 0x56, 0x78};
  vec bytes7 = pack109::serialize(item5);
  testvec("Test 13 - i32 ser", bytes7, v7);
  
  i32 int_i32 = pack109::deserialize_i32(bytes7);  
  test("Test 14 - i32 de", int_i32, item5);

  // i64
  i64 item6 = 0x1234567890abcdef;
  vec v8{0xa7, 0x12, 0x34, 0x56, 0x78, 0x90, 0xab, 0xcd, 0xef};
  vec bytes8 = pack109::serialize(item6);
  testvec("Test 15 - i64 ser", bytes8, v8);

  i64 long_i64 = pack109::deserialize_i64(bytes8);  
  test("Test 16 - i64 de", long_i64, item6);

  // Test Float

  // f32
  f32 item7 = 1.2345;
  vec v9{0xa8, 0x3f, 0x9e, 0x4, 0x19};
  vec bytes9 = pack109::serialize(item7);
  testvec("Test 17 - f32 ser", bytes9, v9);

  f32 float_f32 = pack109::deserialize_f32(bytes9);  
  test("Test 18 - f32 de", float_f32, item7);

  // f64
  f64 item8 = 3.1415926535;
  vec v10{0xa9, 0x40, 0x9, 0x21, 0xfb, 0x54, 0x41, 0x17, 0x44};
  vec bytes10 = pack109::serialize(item8);
  testvec("Test 19 - f64 ser", bytes10, v10);

  f64 float_f64 = pack109::deserialize_f64(bytes10);  
  test("Test 20 - f64 de", float_f64, item8); 

  // Test Strings --------------------->

  // s8
  string item9 = "buggin";
  vec v11{0xaa, 6, 'b', 'u', 'g', 'g', 'i', 'n'};
  vec bytes11 = pack109::serialize(item9);
  testvec("Test 21 - s8 ser", bytes11, v11); 

  string string_s8 = pack109::deserialize_string(bytes11);  
  testString("Test 22 - s8 de", string_s8, item9);

  // s16
  string item10 = "All that is to say that I just got back from the polls. People my age and older are voting in droves. If you don't want to be stuck with a government full of old politicians with old ideas, get out there and make sure your voice is heard. Even if there isn't a perfect candidate running in your local elections, the voting data is used for strategizing come next election. Political parties will shift to appeal to the wants and needs of your age group - but only if you vote. Otherwise they'll just keep pandering to the most dependable voting bloc out there: old people.";
  vec v12{0xab, 0x2, 0x3c, 0x41, 0x6c, 0x6c, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x69, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x73, 0x61, 0x79, 0x20, 0x74, 0x68, 0x61, 0x74, 0x20, 0x49, 0x20, 0x6a, 0x75, 0x73, 0x74, 0x20, 0x67, 0x6f, 0x74, 0x20, 0x62, 0x61, 0x63, 0x6b, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x6f, 0x6c, 0x6c, 0x73, 0x2e, 0x20, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x20, 0x6d, 0x79, 0x20, 0x61, 0x67, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x20, 0x61, 0x72, 0x65, 0x20, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x64, 0x72, 0x6f, 0x76, 0x65, 0x73, 0x2e, 0x20, 0x49, 0x66, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x64, 0x6f, 0x6e, 0x27, 0x74, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x73, 0x74, 0x75, 0x63, 0x6b, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x61, 0x20, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x75, 0x6c, 0x6c, 0x20, 0x6f, 0x66, 0x20, 0x6f, 0x6c, 0x64, 0x20, 0x70, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x69, 0x61, 0x6e, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x6f, 0x6c, 0x64, 0x20, 0x69, 0x64, 0x65, 0x61, 0x73, 0x2c, 0x20, 0x67, 0x65, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6d, 0x61, 0x6b, 0x65, 0x20, 0x73, 0x75, 0x72, 0x65, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x20, 0x69, 0x73, 0x20, 0x68, 0x65, 0x61, 0x72, 0x64, 0x2e, 0x20, 0x45, 0x76, 0x65, 0x6e, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x20, 0x69, 0x73, 0x6e, 0x27, 0x74, 0x20, 0x61, 0x20, 0x70, 0x65, 0x72, 0x66, 0x65, 0x63, 0x74, 0x20, 0x63, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x20, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x69, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6f, 0x6d, 0x65, 0x20, 0x6e, 0x65, 0x78, 0x74, 0x20, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x50, 0x6f, 0x6c, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x73, 0x68, 0x69, 0x66, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x70, 0x70, 0x65, 0x61, 0x6c, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x77, 0x61, 0x6e, 0x74, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x61, 0x67, 0x65, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x2d, 0x20, 0x62, 0x75, 0x74, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x69, 0x66, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x76, 0x6f, 0x74, 0x65, 0x2e, 0x20, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x77, 0x69, 0x73, 0x65, 0x20, 0x74, 0x68, 0x65, 0x79, 0x27, 0x6c, 0x6c, 0x20, 0x6a, 0x75, 0x73, 0x74, 0x20, 0x6b, 0x65, 0x65, 0x70, 0x20, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6d, 0x6f, 0x73, 0x74, 0x20, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x74, 0x68, 0x65, 0x72, 0x65, 0x3a, 0x20, 0x6f, 0x6c, 0x64, 0x20, 0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x2e,};
  vec bytes12 = pack109::serialize(item10);
  testvec("Test 23 - s16 ser", bytes12, v12); 

  string string_s16 = pack109::deserialize_string(bytes12);  
  testString("Test 24 - s16 de", string_s16, item10); 

  // Test Arrays ------------------->

  // a8
  std::vector<u8> item11{1, 2, 3, 4, 5};
  vec v13{0xac, 0x5, 0x1, 0x2, 0x3, 0x4, 0x5,};
  vec bytes13 = pack109::serialize(item11);
  testvec("Test 25 - vec_a8 ser", bytes13, v13);

  std::vector<u8> vec_a8 = pack109::deserialize_vec_u8(bytes13);  
  test("Test 26 - vec_a8 de", vec_a8, item11); 

  // a16
  std::vector<u64> item12{0x12345678, 2, 3, 4, 5};
  vec v14{0xac, 0x5, 0xa4, 0x0, 0x0, 0x0, 0x0, 0x12, 0x34, 
          0x56, 0x78, 0xa4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0xa4, 
          0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3, 0xa4, 0x0, 0x0, 0x0, 0x0, 0x0, 
          0x0, 0x0, 0x4, 0xa4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x5};
  vec bytes14 = pack109::serialize(item12);
  testvec("Test 27 - vec_a16 ser", bytes14, v14);

  std::vector<u64> vec_a16 = pack109::deserialize_vec_u64(bytes14);  
  test("Test 28 - vec_a16 de", vec_a16, item12); 

  //f64
  std::vector<f64> item13 {1.1, 1.2, 1.3};
  vec v15{0xac, 0x3, 0xa9, 0x3f, 0xf1, 0x99, 0x99, 0x99, 0x99, 0x99,
                0x9a, 0xa9, 0x3f, 0xf3, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,
                0xa9, 0x3f, 0xf4, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcd};
  vec bytes15 = pack109::serialize(item13);
  testvec("Test 29 - a16_f64 ser", bytes15, v15);

  std::vector<f64> vec_f64 = pack109::deserialize_vec_f64(bytes15);
  test("Test 30 - a16_f64 de", vec_f64, item13);

  //string
  std::vector<string> item14 = {"buggin", "howdy", "radical", "spectacular"};
  vec v16{0xac, 0x4, 0xaa, 0x6, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6e, 0xaa, 0x5, 0x68, 0x6f, 0x77, 0x64, 0x79, 0xaa, 0x7, 0x72, 0x61, 0x64, 0x69, 0x63, 0x61, 0x6c, 0xaa, 0xb, 0x73, 0x70, 0x65, 0x63, 0x74, 0x61, 0x63, 0x75, 0x6c, 0x61, 0x72};
  vec bytes16 = pack109::serialize(item14);
  //pack109::printVec(bytes16);
  testvec("Test 31 - vec_string ser", bytes16, v16);

  std::vector<string> vec_string = pack109::deserialize_vec_string(bytes16);  
  test("Test 32 - vec_string de", vec_string, item14); 


  // // Test Person struct
  // Person wheatley {age: 10, height:  3.4, name: "wheatley"};
  // vec v17{0xae, 0x1, 0xaa, 0x6, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0xae, 0x3, 0xaa, 0x3, 0x41, 0x67, 0x65, 0xa2, 0xa, 0xaa, 0x6, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0xa8, 0x40, 0x59, 0x99, 0x9a, 0xaa, 0x4, 0x4e, 0x61, 0x6d, 0x65, 0xaa, 0x3, 0x41, 0x6e, 0x6e};
  // vec bytes17 = pack109::serialize(wheatley);
  // testvec("Test 33 - vec_person ser", bytes17, v17);

  // Person vec_person = pack109::deserialize_person(bytes17);  
  // test_Person("Test 34 - vec_person de", vec_person, wheatley); 

  Person testPerson = {20, 45.6, "Bob"};
  vec v_m8{ 0xae, 0x1, 0xaa, 0x6, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
            0xae, 0x3, 0xaa, 0x3, 0x41, 0x67, 0x65, 0xa2, 0x14, 0xaa,
            0x6, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0xa8, 0x42, 0x36,
            0x66, 0x66, 0xaa, 0x4, 0x4e, 0x61, 0x6d, 0x65, 0xaa, 0x3,
            0x42, 0x6f, 0x62 };
  vec bytes_m8 = pack109::serialize(testPerson);
  testvec("Test 41 - m8 ser", bytes_m8, v_m8);

  Person resultP = pack109::deserialize_person(bytes_m8);
  test_Person("Test 42 - m8 de", testPerson, resultP);

  

  return 0;
}
